{"name":"Xio2","tagline":"High performance I/O for the JVM","body":"xio2\r\n====\r\n\r\nHigh performance I/O for the JVM\r\n\r\n\r\n# Overview\r\n\r\n* Server Start\r\n* Acceptor receives connection\r\n* Channel Context parses request\r\n* Service issues response\r\n\r\n# Server\r\n\r\n> One Server to rule them all, One Server to find them,\r\n\r\n> One Server to bring them all and in the darkness bind them\r\n\r\n * Composes the routes map, server socket channel, acceptor, and event loop pool.\r\n * Provides a method to add routes to the map.\r\n * Configures event loop pool to use all of the available cores and starts it.\r\n * Runs acceptor event loop until it terminates (effectively forever).\r\n \r\n# Acceptor\r\n\r\n * Abstracts away the implementation details of java nio accept events.\r\n * Implements an event loop that just deals with accept events.\r\n * Accepts incoming connections, builds a channel context, attaches the context to an event loop from the pool.\r\n\r\n# ChannelContext\r\n\r\n * Composes socket reading with http parsing to build an http request object.\r\n * Maintains a simple state machine that represents the status of the request/response cycle.\r\n * Finds a service in the routes map and dispatches it to handle the request, otherwise issues a 404\r\n * Provides an abstraction to write http responses to the wire.\r\n\r\n# Route\r\n\r\n * Implements a sinatra style url matcher using regex.\r\n\r\n# EventLoop\r\n\r\n * Abstracts away the implementation details of java nio read/write events.\r\n * Runs inside of it's own thread.\r\n * Composes channel contexts with nio events to cause i/o.\r\n\r\n# EventLoopPool\r\n\r\n * Convenience class to work with multiple event loops, starting, stopping and cycling through them.\r\n\r\n# Service\r\n\r\n * Base class for defining how to respond to a request.\r\n * Allows multiple Services to be chained together.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}