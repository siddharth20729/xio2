{"name":"Xio2","tagline":"High performance I/O for the JVM","body":"xio2\r\n====\r\n\r\nHigh performance I/O for the JVM\r\n\r\n# Overview\r\n\r\n* Server Start\r\n* Acceptor receives connection\r\n* Channel Context parses request\r\n* Service issues response\r\n\r\n# Server\r\n\r\n> One Server to rule them all, One Server to find them,\r\n\r\n> One Server to bring them all and in the darkness bind them\r\n\r\n * Composes the routes map, server socket channel, acceptor, and event loop pool.\r\n * Provides a method to add routes to the map.\r\n * Configures event loop pool to use all of the available cores and starts it.\r\n * Runs acceptor event loop until it terminates (effectively forever).\r\n \r\n# Acceptor\r\n\r\n * Abstracts away the implementation details of java nio accept events.\r\n * Implements an event loop that just deals with accept events.\r\n * Accepts incoming connections, builds a channel context, attaches the context to an event loop from the pool.\r\n\r\n# ChannelContext\r\n\r\n * Composes socket reading with http parsing to build an http request object.\r\n * Maintains a simple state machine that represents the status of the request/response cycle.\r\n * Finds a httpHandler in the routes map and dispatches it to handle the request, otherwise issues a 404\r\n * Provides an abstraction to write http responses to the wire.\r\n\r\n# Route\r\n\r\n * Implements a sinatra style url matcher using regex.\r\n\r\n# EventLoop\r\n\r\n * Abstracts away the implementation details of java nio read/write events.\r\n * Runs inside of it's own thread.\r\n * Composes channel contexts with nio events to cause i/o.\r\n\r\n# EventLoopPool\r\n\r\n * Convenience class to work with multiple event loops, starting, stopping and cycling through them.\r\n\r\n# Service\r\n\r\n * Base class for defining how to respond to a request.\r\n * Allows multiple Services to be chained together.\r\n\r\n\r\n###Usage\r\n\r\nHttp Server\r\n\r\n```java\r\nServer s = Http.newServer();\r\n\r\nHttpHandler awesomeHandler = new HttpHandler();\r\nService awesomeServ = new RateLimitServ().andThen(new BusinessLogicServ());\r\nawesomeHandler.addRoute(\"/sweet\", awesomeServ);\r\ns.ssl(true);\r\n\r\ns.serve(8443, awesomeHandler);\r\n\r\n// and when you are all done\r\n\r\ns.close();\r\n```\r\n\r\nHttp Client\r\n```java\r\nXioClient c = Http.newClient();\r\nc.ssl(true);\r\nc.connect(\"localhost:8443\");\r\n\r\nHttpRequest req = new HttpRequest.Builder()\r\n    .uri(\"/\")\r\n    .build\r\n\r\nHttpResponse resp = c.get(req);\r\nSystem.out.println(resp.getStatus());\r\n```\r\n\r\n## For dev on Mac\r\n\r\n### Increase ulimit for benchmarking and load testing \r\nmodify `/Library/LaunchDaemons/limit.maxfiles.plist`\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n  <plist version=\"1.0\">\r\n    <dict>\r\n      <key>Label</key>\r\n        <string>limit.maxfiles</string>\r\n      <key>ProgramArguments</key>\r\n        <array>\r\n          <string>launchctl</string>\r\n          <string>limit</string>\r\n          <string>maxfiles</string>\r\n          <string>65536</string>\r\n          <string>65536</string>\r\n        </array>\r\n      <key>RunAtLoad</key>\r\n        <true/>\r\n      <key>ServiceIPC</key>\r\n        <false/>\r\n    </dict>\r\n  </plist>\r\n```\r\n\r\nmodify `/Library/LaunchDaemons/limit.maxproc.plist`\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple/DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n  <plist version=\"1.0\">\r\n    <dict>\r\n      <key>Label</key>\r\n        <string>limit.maxproc</string>\r\n      <key>ProgramArguments</key>\r\n        <array>\r\n          <string>launchctl</string>\r\n          <string>limit</string>\r\n          <string>maxproc</string>\r\n          <string>2048</string>\r\n          <string>2048</string>\r\n        </array>\r\n      <key>RunAtLoad</key>\r\n        <true />\r\n      <key>ServiceIPC</key>\r\n        <false />\r\n    </dict>\r\n  </plist>\r\n```\r\n\r\nBoth plist files must be owned by `root:wheel` and have permissions `-rw-r--r--`. This permissions should be in place by default, but you can ensure that they are in place by running `sudo chmod 644 <filename>`. \r\n\r\nNow reboot your computer and run\r\n\r\n```shell\r\n$ ulimit -a\r\n```\r\n\r\nto verify that the limits have been changed\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}